name: CI

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for git describe
        fetch-tags: true  # Fetch all tags

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "github-actions@github.com"
        git fetch --tags
        git describe --tags  # Debug: show current git state

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        python3 --version
        curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2
        poetry --version

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: |
        poetry install
        poetry run pre-commit run --all-files

    - name: Debug Poetry version
      run: |
        poetry build
        poetry run python -c "from hello_world import __version__; print(f'Package version: {__version__}')"  # Debug: show package version

    - name: Run tests
      run: poetry run pytest tests/

    - name: Test version with git tag
      run: |
        git tag -a v1.2.3 -m "Test version"
        poetry build  # Update version in build artifacts
        VERSION=$(poetry run python -c "from hello_world import __version__; print(__version__)")
        if [ "$VERSION" != "1.2.3" ]; then
          echo "Version mismatch. Expected 1.2.3, got $VERSION"
          exit 1
        fi

    - name: Test version with distance
      run: |
        echo "Making a commit to create distance from tag" > test.txt
        git add test.txt
        git commit -m "Test commit"
        poetry build  # Update version in build artifacts
        VERSION=$(poetry run python -c "from hello_world import __version__; print(__version__)")
        if [[ ! "$VERSION" =~ ^1\.2\.3\+[0-9]+$ ]]; then
          echo "Version mismatch. Expected 1.2.3+<number>, got $VERSION"
          exit 1
        fi

    - name: Test version without git tag
      run: |
        git tag -d v1.2.3
        poetry build  # Update version in build artifacts
        VERSION=$(poetry run python -c "from hello_world import __version__; print(__version__)")
        EXPECTED=$(poetry version -s)
        if [ "$VERSION" != "${EXPECTED}" ]; then
          echo "Version mismatch. Expected ${EXPECTED}, got ${VERSION}"
          exit 1
        fi
